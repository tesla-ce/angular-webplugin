# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Angular package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types:
      - created
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get version values
        id: vars
        run: |
          echo ::set-output name=version::$(sed -nE 's/^\s*"version": "(.*?)",$/\1/p' projects/tesla-ce/web-plugin/package.json)
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Show captured versions
        run: |
          echo 'Version in source code: ${{ steps.vars.outputs.version }}'
          echo 'Release version: ${{ steps.vars.outputs.tag }}'
      - name: Check version tag
        uses: nick-invision/assert-action@v1.1.0
        if: github.event_name == 'release'
        with:
          expected: ${{ steps.vars.outputs.tag }}
          actual: ${{ steps.vars.outputs.version }}
          comparison: exact
  test:
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-latest ] #, windows-latest, macos-latest ]
    needs: check
    runs-on: ${{ matrix.operating-system }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '15'
      - run: npm install
      - run: npm run testgithub
      # - run: npm run ng test --no-watch --code-coverage
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v1.5.0
        if: matrix.operating-system == 'ubuntu-latest'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          OS: ${{ matrix.operating-system }}
        with:
          fail_ci_if_error: true
          env_vars: OS
          files: ./coverage/tesla-ce/web-plugin/lcov.info
      - name: Fossa update license analysis
        uses: fossa-contrib/fossa-action@v1
        with:
          fossa-api-key: ${{ secrets.FOSSA_API_KEY }}
  sonar:
    needs: test
    name: Sonar
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  publish:
    needs: sonar
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '15'
          registry-url: 'https://registry.npmjs.org'
      - name: Get version values
        id: vars
        run: |
          echo ::set-output name=version::$(sed -nE 's/^\s*"version": "(.*?)",$/\1/p' projects/tesla-ce/web-plugin/package.json)
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Build and publish
        if: github.event_name == 'release'
        run: |
          cd projects/tesla-ce/web-plugin
          npm install
          cd ../../../
          npm install
          npm run buildwebpluginprod
          cd dist/tesla-ce/web-plugin/
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Build for tesla/core
        run: |
          cd projects/tesla-ce/web-plugin
          npm install
          cd ../../../
          npm install
          npm run buildwebpluginteslacore
          cd dist/web-plugin
          rm assets/tesla.png && rm assets/test_data.json
          zip web-plugin-${{ steps.vars.outputs.version }}.zip web-plugin.js 3rdpartylicenses.txt styles.css -r assets
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: web-plugin-${{ steps.vars.outputs.version }}
          path: dist/web-plugin/web-plugin-${{ steps.vars.outputs.version }}.zip
      - name: Get release
        if: github.event_name == 'release'
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload release artifact
        uses: actions/upload-release-asset@v1.0.2
        if: github.event_name == 'release'
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./dist/web-plugin/web-plugin-${{ steps.vars.outputs.version }}.zip
          asset_name: web-plugin-${{ steps.vars.outputs.version }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ github.token }}
